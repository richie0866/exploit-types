/**
 * A library of useful HTTP functions.
 *
 * Tags: ScriptWare
 */
declare namespace http {
	/**
	 * Sends an HTTP request using a dictionary to specify the request data, such as the target URL, method, headers and request body data. It returns a dictionary that describes the response data received.
	 *
	 * Tags: ScriptWare
	 */
	function request(requestOptions: RequestAsyncRequest): RequestAsyncResponse;
}
/**
 * A library of Synapse-specific utility functions.
 *
 * Tags: [Synapse](https://x.synapse.to/docs/reference/syn_lib.html)
 */
declare namespace syn {
	/**
	 * Sends an HTTP request using a dictionary to specify the request data, such as the target URL, method, headers and request body data. It returns a dictionary that describes the response data received.
	 *
	 * Tags: [Synapse](https://x.synapse.to/docs/reference/syn_lib.html)
	 */
	function request(requestOptions: RequestAsyncRequest): RequestAsyncResponse;
	/**
	 * Protects your GUI from recursive FindFirstChild-style attacks. After you call the function, recursive FFA calls from non-Synapse contexts will skip over your protected instances & all children of such instances.
	 *
	 * Tags: [Synapse](https://x.synapse.to/docs/reference/syn_lib.html)
	 */
	function protect_gui(object: GuiObject): void;
}

/**
 * A library useful for creating UI elements that is drawn by the scripting engine.
 *
 * Tags: [UNC](https://github.com/unified-naming-convention/NamingStandard/blob/main/api/drawing/Drawing.new.md)
 */

declare namespace Drawing {
	/**
	 * Creates and returns a new draw object of type 'class'
	 *
	 * Tags: [UNC](https://github.com/unified-naming-convention/NamingStandard/blob/main/api/drawing/Drawing.new.md)
	 */
	type Drawing = {
	    new <T extends keyof CreatableDrawings>(drawingType: T): CreatableDrawings[T];
	    readonly Fonts: {
		UI: 0;
		System: 1;
		Plex: 2;
		Monospace: 3;
	    };
	};
	
	type CreatableDrawing = CreatableDrawings[keyof CreatableDrawings];

	interface BaseDrawing {
	    Visible: boolean;
	    ZIndex: number;
	    Transparency: number;
	    Color: Color3;
	    Remove(): void;
	}

	interface Line extends BaseDrawing {
	    Thickness: number;
	    From: Vector2;
	    To: Vector2;
	}

	interface Text extends BaseDrawing {
	    Text: string;
	    readonly TextBounds: Vector2;
	    Size: number;
	    Center: boolean;
	    Outline: boolean;
	    OutlineColor: Color3;
	    Position: Vector2;
	    Font: number;
	}

	interface Image extends BaseDrawing {
	    Data: string;
	    Size: Vector2;
	    Position: Vector2;
	    Rounding: number;
	}

	interface Circle extends BaseDrawing {
	    Thickness: number;
	    NumSides: number;
	    Radius: number;
	    Filled: boolean;
	    Position: Vector2;
	}

	interface Square extends BaseDrawing {
	    Thickness: number;
	    Size: Vector2;
	    Position: Vector2;
	    Filled: boolean;
	}

	interface Quad extends BaseDrawing {
	    Thickness: number;
	    PointA: Vector2;
	    PointB: Vector2;
	    PointC: Vector2;
	    PointD: Vector2;
	    Filled: boolean;
	}

	interface Triangle extends BaseDrawing {
	    Thickness: number;
	    PointA: Vector2;
	    PointB: Vector2;
	    PointC: Vector2;
	    Filled: boolean;
	}
	
	
	

}
